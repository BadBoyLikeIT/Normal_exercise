a&&(!b)||b  &&会截断 ||成功之后也会截断
| ^  或 异或

#include <stdio.h>
#include <string.h>
int main()
{
    int a=1,b=3,c=2,d=4,k;
    a = b = c+2;
    char *s = "2011\02\12";
    char *s1 = "\02";
    printf("%s\n",s);
    int num = strlen(s);
    printf("%d",num);
   // printf("%d",a);

}

反码加一就是补码
补码取反加一就是原码

移位运算
#include <stdio.h>
#include <string.h>
#include <iostream>
using namespace std;
int main()
{
    unsigned a = 21;
    unsigned c = a<<2;
   cout<<c<<endl;
}

int main()
{
    int i, s=1;
    for(i = 1; i < 5; i ++)
    {
        s += 1 << i;
    }
    printf("i = %d, s = %d\n", i , s);


}


变量由字母、数字、下划线构成，以字母、下划线开头。
%4.2f 小数部分为2位，总长为4位，不超过右边用空格，超过按照实际输出。
若fp是指向某文件的指针,且已读到该文件的末尾,则C语言函数feof(fp) 的返回值是非零值。
int x=40;  printf("%d\n",x=x<<1); 按二进制倍乘。


字符串统计：
#include <stdio.h>
#include <string.h>
int myfunc( char* str1, int length )
{
    int i, n;
    n = 0;
    for ( i=0; i<length;i++)
    {
       if (str1[i] >='A'&&str1[i]<='Z') n++;
    }
    return n;

}
int main()
{
   char* s1 = "Hellow, World!";
   int len = strlen(s1);
   printf("%d \n", myfunc(s1,len));


}

%x 16进制 %d 十进制

逗号运算符优先级低。且以最后一个为准。
int a=3, b=5, c;
c = a>b, a+b;   // 运行后c值为0，因为逗号运算符的优先级低于赋值运算符，所以先将a>b的结果(为0)赋值给c，之后运算a+b（结果不保存），所以c=0
 
c = (a>b, a+b); // 运行后c值为8，因为括号的优先级高于赋值运算符，所以先算括号内的表达式，此时计算结果为最后一个表达式的值，即a+b的值，所以c=8

友元：提高程序的运用效率

结构体中的string如何赋值：
#include<string>  
using namespace std;  
struct temp  
{  
string s;  
};  
int main()  
{  
const string p="aaa";  
temp *q;  
q=(struct temp*)malloc(sizeof(struct temp));  
q->s=p;  
}  
上述这种情况的赋值会导致程序中断
需要用用new来分配内存，malloc不会调用结构函数
结构体内的string不定长，不能动态分配内存。
应该改成：
temp *p = new temp;
标签名和类型名都是可以用的
如果只是申明的指针是野指针，不可以使用。